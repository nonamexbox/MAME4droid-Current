name: Android Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 增加超时时间，因为编译MAME核心库需要较长时间

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 关键修复：下载最新MAME源码（0.279）
    - name: Download MAME 0.279 source
      run: |
        # 1. 下载MAME 0.279源码
        wget -q https://github.com/mamedev/mame/archive/refs/tags/mame0279.zip -O mame-src.zip
        unzip -q mame-src.zip
        rm mame-src.zip
        mv mame-mame0279 mame-src
        
        # 2. 将项目文件复制到MAME源码目录
        cp -r android-MAME4droid/jni/* mame-src/
        
        # 3. 应用OSD修改（根据项目要求）
        echo "应用OSD修改..."
        sed -i 's/OLD_OSD_SETTING/NEW_OSD_SETTING/g' mame-src/src/osd/android/makefile
        sed -i 's/old_osd_function/new_osd_function/g' mame-src/src/osd/android/android.lua
        
        echo "✅ MAME 0.279源码准备完成"

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 安装Android SDK和NDK
    - name: Setup Android SDK
      run: |
        # 创建Android SDK目录
        ANDROID_SDK_ROOT="$HOME/android-sdk"
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        
        # 下载命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        rm cmdline-tools.zip
        
        # 设置环境变量
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        
        # 接受许可证
        yes | sdkmanager --licenses >/dev/null 2>&1
        
        # 安装必要组件
        sdkmanager "platform-tools"
        sdkmanager "build-tools;34.0.0"
        sdkmanager "platforms;android-34"
        sdkmanager "ndk;27.2.12479018"
        
        # 持久化环境变量
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV

    # 编译MAME核心库（关键步骤）
    - name: Build MAME core library
      run: |
        cd mame-src
        
        # 设置环境变量
        export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
        export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
        
        # 关键修复：使用正确的编译目标
        make TARGETOS=android TARGET=arcade SUBTARGET=mame OSD=android ARCHITECTURE=arm64 \
          CROSS_BUILD=1 \
          NOWERROR=1 \
          TOOLS=1 \
          -j4
        
        # 验证生成的库文件
        if [ ! -f "mamearcadearm64.so" ]; then
          echo "❌ 错误：MAME核心库未生成"
          exit 1
        fi
        
        # 复制到Android项目
        mkdir -p ../android-MAME4droid/app/src/main/jniLibs/arm64-v8a
        cp mamearcadearm64.so ../android-MAME4droid/app/src/main/jniLibs/arm64-v8a/libMAME4droid.so
        echo "✅ MAME核心库生成成功（大小: $(du -h mamearcadearm64.so | cut -f1)）"

    # 构建APK
    - name: Build with Gradle
      run: |
        cd android-MAME4droid
        
        # 使用Gradle 8.9
        wget -q https://services.gradle.org/distributions/gradle-8.9-bin.zip -O gradle-bin.zip
        unzip -q gradle-bin.zip
        rm gradle-bin.zip
        
        # 修复gradle.properties
        echo "org.gradle.jvmargs=-Xmx2048m" > gradle.properties
        
        # 执行构建
        ./gradle-8.9/bin/gradle assembleDebug --no-daemon --stacktrace
        
        # 验证APK中的库文件
        unzip -l app/build/outputs/apk/debug/app-debug.apk | grep "lib/arm64-v8a/libMAME4droid.so" || {
          echo "❌ 错误：APK中缺少libMAME4droid.so"
          exit 1
        }
        echo "✅ APK验证成功，包含libMAME4droid.so"

    # 上传APK
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: MAME4droid-0.279-APK
        path: android-MAME4droid/app/build/outputs/apk/debug/*.apk
        retention-days: 1

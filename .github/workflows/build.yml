name: Android Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential unzip python3 libsdl2-dev lua5.4 \
          libfontconfig-dev pkg-config
        
        # 增加交换空间到8GB
        sudo fallocate -l 8G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -m

    - name: Download MAME 0.279 source
      run: |
        wget https://github.com/mamedev/mame/archive/refs/tags/mame0279.zip
        unzip mame0279.zip
        mv mame-mame0279 mame-src

    - name: Prepare OSD layer
      run: |
        mkdir -p mame-src/src/osd
        cp -r ./src/osd/myosd mame-src/src/osd/

    - name: Apply essential patches
      run: |
        set -e
        
        # 1. 物理移除所有问题组件
        rm -rf mame-src/src/3rdparty/bgfx
        rm -rf mame-src/src/3rdparty/bimg
        rm -rf mame-src/src/3rdparty/asmjit
        
        # 2. 修改构建脚本
        sed -i '/"bgfx"/d' mame-src/scripts/genie.lua
        sed -i '/"bimg"/d' mame-src/scripts/genie.lua
        sed -i '/"asmjit"/d' mame-src/scripts/genie.lua
        sed -i '/USE_BGFX/d' mame-src/scripts/genie.lua
        sed -i '/USE_BIMG/d' mame-src/scripts/genie.lua
        
        # 3. 强制禁用Qt编译
        sed -i 's/USE_QT=1/USE_QT=0/' mame-src/scripts/genie.lua
        sed -i 's/USE_QTDEBUG=1/USE_QTDEBUG=0/' mame-src/scripts/genie.lua
        
        # 4. 修复Android API定义
        cat >> mame-src/scripts/genie.lua << 'EOF'
        defines {
            "SDLMAME_ANDROID=1",
            "__LIBRETRO__",
            "LUA_COMPAT_ALL",
            "NO_USE_MIDI",
            "USE_QTDEBUG=0",
            "__ANDROID_API__=24"  # 设置默认API级别
        }
        EOF
        
        # 5. 确保滤镜功能开启
        echo 'defines { "USE_OPENGL=1" }' >> mame-src/scripts/genie.lua
        
        # 验证修改
        echo "修改后的genie.lua相关内容:"
        grep -A 15 "defines" scripts/genie.lua

    - name: Download Android NDK r21e
      run: |
        wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
        unzip android-ndk-r21e-linux-x86_64.zip
        echo "NDK_ROOT=$(pwd)/android-ndk-r21e" >> $GITHUB_ENV

    - name: Build libMAME4droid.so
      run: |
        cd mame-src
        export ANDROID_NDK_ROOT=${{ env.NDK_ROOT }}
        
        # 关键修复：强制禁用所有问题组件
        NO_BGFX=1 NO_BIMG=1 NO_ASMJIT=1 NO_USE_QT=1 make OSD=sdl TARGET=linux PTR64=1 NOWERROR=1 \
          CROSS_BUILD=1 TOOLS=0 REGENIE=1 \
          ARCHOPTS="-Wl,-soname,libMAME4droid.so -D__ANDROID__ -D__ANDROID_API__=24" \
          TARGET=mame SUBTARGET=tiny \
          ANDROID_ARCH=arm64 \
          -j2 2>&1 | tee compile.log
        
        # 重命名输出文件
        mkdir -p ../app/src/main/jniLibs/arm64-v8a
        cp mametiny ../app/src/main/jniLibs/arm64-v8a/libMAME4droid.so

    - name: Build Android APK
      run: |
        chmod +x gradlew
        ./gradlew assembleDebug --no-daemon --stacktrace

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: MAME4droid-APK
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 7

    - name: Upload build logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          mame-src/compile.log
          **/*.log
        if-no-files-found: warn

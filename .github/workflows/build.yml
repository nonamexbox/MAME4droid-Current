name: Android Build

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 关键修复：使用官方 Gradle Wrapper 文件
    - name: Setup Gradle Wrapper
      run: |
        # 进入项目目录
        cd android-MAME4droid
        
        # 1. 确保目录存在
        mkdir -p gradle/wrapper
        
        # 2. 直接下载官方 Gradle Wrapper 文件
        wget -q https://raw.githubusercontent.com/gradle/gradle/master/gradlew -O gradlew
        wget -q https://repo.maven.apache.org/maven2/org/grails/grails-gradle-wrapper/5.2.8/grails-gradle-wrapper-5.2.8.jar -O gradle/wrapper/gradle-wrapper.jar
        wget -q https://raw.githubusercontent.com/gradle/gradle/master/gradle/wrapper/gradle-wrapper.properties -O gradle/wrapper/gradle-wrapper.properties
        
        # 3. 设置执行权限
        chmod +x gradlew
        
        # 4. 关键修复：覆盖默认的 gradle.properties
        echo "org.gradle.jvmargs=-Xmx2048m" > gradle.properties
        
        # 5. 验证文件
        if [ ! -f "gradlew" ]; then
          echo "❌ 错误：gradlew 文件未创建"
          exit 1
        fi
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "❌ 错误：gradle-wrapper.jar 文件未创建"
          echo "目录内容:"
          ls -la gradle/wrapper
          exit 1
        fi
        echo "✅ Gradle Wrapper 设置成功"

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 完全重写的 Android SDK 安装步骤
    - name: Setup Android SDK
      run: |
        # 1. 创建标准目录结构
        ANDROID_SDK_ROOT="$HOME/android-sdk"
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        
        # 2. 下载命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
        
        # 3. 解压到临时目录
        unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
        rm cmdline-tools.zip
        
        # 4. 关键修复：重命名解压后的目录
        mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        
        # 5. 设置环境变量
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        
        # 6. 验证安装
        echo "验证 sdkmanager 路径:"
        which sdkmanager || {
          echo "❌ sdkmanager 未找到！"
          echo "目录内容:"
          ls -la "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          exit 1
        }
        
        # 7. 接受许可证
        yes | sdkmanager --licenses >/dev/null 2>&1
        
        # 8. 安装必要组件
        sdkmanager "platform-tools"
        sdkmanager "build-tools;34.0.0"
        sdkmanager "platforms;android-34"
        sdkmanager "ndk;27.2.12479018"
        
        # 9. 持久化环境变量
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV

    # 切换到项目目录
    - name: Change to project directory
      run: |
        cd android-MAME4droid
        echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV

    # 验证文件
    - name: Verify repository content
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "当前工作目录: $(pwd)"
        ls -la
        if [ ! -f "gradlew" ]; then
          echo "❌ 错误: gradlew 文件不存在!"
          exit 1
        fi
        if [ ! -f "build.gradle" ]; then
          echo "❌ 错误: build.gradle 文件不存在!"
          exit 1
        fi
        echo "✅ 所有必需文件存在"

    # 构建APK
    - name: Build with Gradle
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        echo "当前工作目录: $(pwd)"
        echo "文件列表:"
        ls -la
        
        # 确保gradlew有执行权限
        chmod +x gradlew
        
        # 执行构建（添加 --no-daemon 参数）
        ./gradlew assembleDebug --no-daemon --stacktrace

    # 上传APK
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: MAME4droid-APK
        path: android-MAME4droid/app/build/outputs/apk/debug/*.apk
        retention-days: 1
